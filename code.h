#include <limits.h>
#include <stdlib.h>

#define CODE_SIZE = 16

#define SCRAMBLE = 0xE8

/*

    (7)(6)(5)(4)(3)(2)(1)(0)  (7)(6)(5)(4)(3)(2)(1)(0)
(7) [1][0][0][0][0][0][0][0]  [0][0][0][0][0][0][0][0]
(6) [0][1][0][0][0][0][0][0]  [0][0][0][0][0][0][0][0]
(5) [0][0][1][0][0][0][0][0]  [0][0][0][0][0][0][0][0]
(4) [0][0][0][1][0][0][0][0]  [0][0][0][0][0][0][0][0]
(3) [0][0][0][0][1][0][0][0]  [0][0][0][0][0][0][0][0]
(2) [0][0][0][0][0][1][0][0]  [0][0][0][0][0][0][0][0]
(1) [0][0][0][0][0][0][1][0]  [0][0][0][0][0][0][0][0]
(0) [0][0][0][0][0][0][0][1]  [0][0][0][0][0][0][0][0]

(7) [0][0][0][0][0][0][0][0]  [1][0][0][0][0][0][0][0]
(6) [0][0][0][0][0][0][0][0]  [0][1][0][0][0][0][0][0]
(5) [0][0][0][0][0][0][0][0]  [0][0][1][0][0][0][0][0]
(4) [0][0][0][0][0][0][0][0]  [0][0][0][1][0][0][0][0]
(3) [0][0][0][0][0][0][0][0]  [0][0][0][0][1][0][0][0]
(2) [0][0][0][0][0][0][0][0]  [0][0][0][0][0][1][0][0]
(1) [0][0][0][0][0][0][0][0]  [0][0][0][0][0][0][1][0]
(0) [0][0][0][0][0][0][0][0]  [0][0][0][0][0][0][0][1]

char code[] = {
   0     1
   1     2
   2     4
   3     8
   4    10
   5    20
   6    40
   7    80
   
   8   100
   9   200
   a   400
   b   800
   c  1000
   d  2000
   e  4000
   f  8000
*/

typedef struct {
    char data[CODE_SIZE];
    char scramble[CODE_SIZE];
} Code;


Code createCode(void) {
    Code c;
    for (int i = 0; i < CODE_SIZE; i++) {
        c.data[i]     = randomChar();
        c.scramble[i] = randomChar();
    }
    return c;
}

int superScramble(int input) {
    

}

char randomChar(void) {
    /* Could make this much more efficient, but it is unnecisary */
    return random() % CHAR_MAX;
}

char scramble(char ch) {
    return ch ^ SCRAMBLE;
}


